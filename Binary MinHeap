class MinHeap
{
    int *harr;
    int capacity;
    int heap_size;
public:
MinHeap(int cap=100) {heap_size = 0; capacity = cap; harr = new int[cap];}
    int extractMin();
    void deleteKey(int i);
    void insertKey(int k);
};

MinHeap::MinHeap(int cap)
{
    heap_size = 0;
    capacity = cap;
    harr = new int[cap];
}

void heapify(int i,int *harr,int heap_size)
{
    int left=2*i+1;
    int right=2*i+2;
    int minm=i;
    if(left<=heap_size && harr[left]<harr[minm])
    minm=left;
    if(right<=heap_size && harr[right]<harr[minm])
    minm=right;
    if(minm!=i)
    {
        swap(harr[i],harr[minm]);
        heapify(minm,harr,heap_size);
    }
}

int MinHeap ::  extractMin()
{   if(heap_size<=0)
    return -1;
    int x=harr[0];
    if(heap_size==1)
    {
        heap_size=0;
        return x;
    }
    
    harr[0]=harr[heap_size-1];
    heap_size--;
    heapify(0,harr,heap_size);
    return x;
}


/* Removes element from position x in the min heap  */
void MinHeap :: deleteKey(int i)
{   if(i>=heap_size)
    return;
    harr[i]=INT_MIN;
    while(i!=0 && harr[(i-1)/2]>harr[i])
    {
        swap(harr[(i-1)/2],harr[i]);
        i=(i-1)/2;
    }
    extractMin();
}








/* Inserts an element at position x into the min heap*/
void MinHeap ::insertKey(int k)
{  if (heap_size == capacity)
    {
        cout << "\nOverflow: Could not insertKey\n";
        return;
    }
  
   heap_size++;
   harr[heap_size-1]=k;
  
   int i=heap_size-1;
   while(i!=0 && harr[(i-1)/2]>harr[i])
   {
       swap(harr[(i-1)/2],harr[i]);
       i=(i-1)/2;
   }
}
